// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagerAPIPractice.DataAccess;

#nullable disable

namespace TaskManagerAPIPractice.DataAccess.Migrations
{
    [DbContext(typeof(TaskAPIDbContext))]
    partial class TaskAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TagEntityTaskEntity", b =>
                {
                    b.Property<Guid>("TagsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TasksId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TagsId", "TasksId");

                    b.HasIndex("TasksId");

                    b.ToTable("TagEntityTaskEntity");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryCreatedById");

                    b.ToTable("CategoryEntities");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.NotificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProjectCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCreatedById");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("TagCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TagCreatedById");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TaskAssignedToId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaskCreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskAssignedToId");

                    b.HasIndex("TaskCreatedById");

                    b.HasIndex("TeamId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("UserEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TagEntityTaskEntity", b =>
                {
                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.TagEntity", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.TaskEntity", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.CategoryEntity", b =>
                {
                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.UserEntity", "CategoryCreatedBy")
                        .WithMany("Categories")
                        .HasForeignKey("CategoryCreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CategoryCreatedBy");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.NotificationEntity", b =>
                {
                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.TaskEntity", "Task")
                        .WithMany("Notifications")
                        .HasForeignKey("TaskId");

                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.UserEntity", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.ProjectEntity", b =>
                {
                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.UserEntity", "ProjectCreatedBy")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectCreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.TeamEntity", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ProjectCreatedBy");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.TagEntity", b =>
                {
                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.UserEntity", "TagCreatedBy")
                        .WithMany("Tags")
                        .HasForeignKey("TagCreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("TagCreatedBy");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.TaskEntity", b =>
                {
                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.CategoryEntity", "Category")
                        .WithMany("Tasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.ProjectEntity", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.UserEntity", "TaskAssignedTo")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("TaskAssignedToId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.UserEntity", "TaskCreatedBy")
                        .WithMany("CreatedTasks")
                        .HasForeignKey("TaskCreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.TeamEntity", "Team")
                        .WithMany("Tasks")
                        .HasForeignKey("TeamId");

                    b.Navigation("Category");

                    b.Navigation("Project");

                    b.Navigation("TaskAssignedTo");

                    b.Navigation("TaskCreatedBy");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.TeamEntity", b =>
                {
                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.UserEntity", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.UserEntity", null)
                        .WithMany("AdministeredTeams")
                        .HasForeignKey("UserEntityId");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.UserEntity", b =>
                {
                    b.HasOne("TaskManagerAPIPractice.DataAccess.ModulEntity.TeamEntity", "Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.CategoryEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.ProjectEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.TaskEntity", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.TeamEntity", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("Tasks");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TaskManagerAPIPractice.DataAccess.ModulEntity.UserEntity", b =>
                {
                    b.Navigation("AdministeredTeams");

                    b.Navigation("AssignedTasks");

                    b.Navigation("Categories");

                    b.Navigation("CreatedTasks");

                    b.Navigation("Notifications");

                    b.Navigation("Projects");

                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
